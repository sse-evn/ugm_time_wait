require('dotenv').config();
const sqlite3 = require('sqlite3').verbose();
const { Telegraf, Markup } = require('telegraf');
const { format } = require('date-fns');
const { utcToZonedTime } = require('date-fns-tz');
const winston = require('winston');

// Configure logging
const logger = winston.createLogger({
  level: 'debug',
  formats: [
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} - ${level} - ${message}`;
    })
  ],
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'bot.log' })
  ]
});

// Configuration
const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  logger.error('BOT_TOKEN is not set');
  process.exit(1);
}

const GROUP_TIMEZONE = process.env.GROUP_TIMEZONE || 'Asia/Almaty';
const ADMIN_USERNAMES = process.env.ADMIN_USERNAMES ? 
  process.env.ADMIN_USERNAMES.split(',').map(u => u.trim()) : [];

// Initialize bot
const bot = new Telegraf(BOT_TOKEN);

// Database setup
const db = new sqlite3.Database('shifts.db');

// Initialize database
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS shifts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT NOT NULL,
      full_name TEXT NOT NULL,
      photo_file_id TEXT,
      shift_date TEXT NOT NULL,
      start_time TEXT NOT NULL,
      end_time TEXT NOT NULL,
      actual_end_time TEXT,
      worked_hours TEXT,
      zone TEXT NOT NULL,
      witag TEXT,
      status TEXT DEFAULT 'active',
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);
});

// Database functions
const dbGet = (query, params = []) => {
  return new Promise((resolve, reject) => {
    db.get(query, params, (err, row) => {
      if (err) reject(err);
      else resolve(row);
    });
  });
};

const dbAll = (query, params = []) => {
  return new Promise((resolve, reject) => {
    db.all(query, params, (err, rows) => {
      if (err) reject(err);
      else resolve(rows);
    });
  });
};

const dbRun = (query, params = []) => {
  return new Promise((resolve, reject) => {
    db.run(query, params, function(err) {
      if (err) reject(err);
      else resolve(this);
    });
  });
};

// Helper functions
const isAdmin = (username) => ADMIN_USERNAMES.includes(username);
const getCurrentDate = () => format(utcToZonedTime(new Date(), GROUP_TIMEZONE), 'dd.MM.yy');
const isValidTime = (time) => /^([01]\d|2[0-3]):([0-5]\d)$/.test(time);

const calculateWorkedHours = (start, end) => {
  const [sh, sm] = start.split(':').map(Number);
  const [eh, em] = end.split(':').map(Number);
  
  let minutes = (eh * 60 + em) - (sh * 60 + sm);
  if (minutes < 0) minutes += 24 * 60;
  
  return `${Math.floor(minutes / 60)}h ${minutes % 60}m`;
};

// Keyboards
const adminKeyboard = Markup.inlineKeyboard([
  [Markup.button.callback('üìä –û—Ç—á–µ—Ç', 'admin_report')],
  [Markup.button.callback('üìã –ê–∫—Ç–∏–≤–Ω—ã–µ', 'active_shifts')],
  [Markup.button.callback('üìù –¢–∞–±–µ–ª—å', 'timesheet')],
  [
    Markup.button.callback('üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å', 'end_shift_menu'),
    Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_shift_menu')
  ]
]);

const shiftActionsKeyboard = (shiftId) => Markup.inlineKeyboard([
  [
    Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_action_${shiftId}`),
    Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_action')
  ]
]);

// Command handlers
bot.command('admin', async (ctx) => {
  const username = ctx.from.username;
  if (!username || !isAdmin(username)) {
    return ctx.reply('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }
  await ctx.reply('üë®‚Äçüíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', adminKeyboard);
});

bot.command(['start', 'help'], async (ctx) => {
  await ctx.replyWithMarkdown(`
üëã –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Å–º–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

\`\`\`
–ò–º—è –§–∞–º–∏–ª–∏—è
07:00 15:00
–ó–æ–Ω–∞ 1
W witag 1
\`\`\`

*–ö–æ–º–∞–Ω–¥—ã:*
/myshifts - –í–∞—à–∏ —Å–º–µ–Ω—ã
/today - –°–º–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
/admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
  `);
});

bot.command('myshifts', async (ctx) => {
  const username = ctx.from.username;
  if (!username) return ctx.reply('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ Telegram');

  try {
    const shifts = await dbAll(
      "SELECT * FROM shifts WHERE username = ? ORDER BY shift_date DESC, start_time", 
      [username]
    );

    if (!shifts.length) return ctx.reply('üìÑ –£ –≤–∞—Å –Ω–µ—Ç —Å–º–µ–Ω');

    let message = `üìã –í–∞—à–∏ —Å–º–µ–Ω—ã (@${username})\n`;
    let currentDate = '';

    for (const shift of shifts) {
      if (shift.shift_date !== currentDate) {
        currentDate = shift.shift_date;
        message += `\nüìÖ *${currentDate}*\n`;
      }

      const status = shift.status === 'active' ? '‚úÖ' : 
                    shift.status === 'completed' ? '‚èπÔ∏è' : '‚ùå';
      
      message += `${status} ${shift.start_time}-${shift.end_time} ${shift.zone}`;
      if (shift.witag && shift.witag !== '–ù–µ—Ç') message += ` (${shift.witag})`;
      message += '\n';
    }

    await ctx.replyWithMarkdown(message);
  } catch (err) {
    logger.error('myshifts error:', err);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω');
  }
});

bot.command('today', async (ctx) => {
  try {
    const today = getCurrentDate();
    const shifts = await dbAll(
      "SELECT * FROM shifts WHERE shift_date = ? ORDER BY start_time",
      [today]
    );

    if (!shifts.length) return ctx.reply(`üìÖ –ù–∞ ${today} —Å–º–µ–Ω –Ω–µ—Ç`);

    let message = `üìÖ –°–º–µ–Ω—ã –Ω–∞ ${today}\n`;
    for (const shift of shifts) {
      const status = shift.status === 'active' ? '‚úÖ' : 
                    shift.status === 'completed' ? '‚èπÔ∏è' : '‚ùå';
      
      message += `\n${status} @${shift.username} (${shift.full_name})\n`;
      message += `${shift.start_time}-${shift.end_time} ${shift.zone}`;
      if (shift.witag && shift.witag !== '–ù–µ—Ç') message += ` (${shift.witag})`;
    }

    await ctx.reply(message);
  } catch (err) {
    logger.error('today error:', err);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω');
  }
});

// Photo handler
bot.on('photo', async (ctx) => {
  const username = ctx.from.username;
  if (!username) return ctx.reply('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ Telegram');

  if (!ctx.message.caption) {
    return ctx.reply('‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é');
  }

  const match = ctx.message.caption.match(
    /^([^\n]+)\n(\d{2}:\d{2})\s(\d{2}:\d{2})\n(–ó–æ–Ω–∞\s+\d+)(?:\n(W\s+witag\s+\d+))?/i
  );

  if (!match) {
    return ctx.replyWithMarkdown(`
‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:
\`\`\`
–ò–º—è –§–∞–º–∏–ª–∏—è
07:00 15:00
–ó–æ–Ω–∞ 1
W witag 1
\`\`\`
    `);
  }

  const fullName = match[1].trim();
  const startTime = match[2];
  const endTime = match[3];
  const zone = match[4].trim();
  const witag = match[5] ? match[5].trim() : '–ù–µ—Ç';

  if (!isValidTime(startTime) || !isValidTime(endTime)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)');
  }

  try {
    const shiftDate = getCurrentDate();
    const existingShifts = await dbAll(
      "SELECT start_time, end_time FROM shifts WHERE username = ? AND shift_date = ?",
      [username, shiftDate]
    );

    for (const shift of existingShifts) {
      if ((startTime < shift.end_time) && (endTime > shift.start_time)) {
        return ctx.reply(
          `‚ùå –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ–Ω–æ–π ${shift.start_time}-${shift.end_time}`
        );
      }
    }

    const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
    await dbRun(
      `INSERT INTO shifts (username, full_name, photo_file_id, shift_date, 
       start_time, end_time, zone, witag)
       VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [username, fullName, photoId, shiftDate, startTime, endTime, zone, witag]
    );

    await ctx.replyWithMarkdown(`
‚úÖ *${fullName}* –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Å–º–µ–Ω—É
üìÖ *–î–∞—Ç–∞:* \`${shiftDate}\`
‚è∞ *–í—Ä–µ–º—è:* \`${startTime}-${endTime}\`
üìç *–ó–æ–Ω–∞:* \`${zone}\`
üîñ *Witag:* \`${witag}\`
    `);
  } catch (err) {
    logger.error('Shift registration error:', err);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–º–µ–Ω—ã');
  }
});

// Admin handlers
bot.action('admin_report', async (ctx) => {
  const username = ctx.from.username;
  if (!username || !isAdmin(username)) {
    return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }

  try {
    const shifts = await dbAll(
      "SELECT * FROM shifts ORDER BY shift_date DESC, start_time"
    );

    if (!shifts.length) return ctx.reply('üìÑ –°–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');

    let message = 'üìä *–û—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–∞–º*\n';
    let currentDate = '';

    for (const shift of shifts) {
      if (shift.shift_date !== currentDate) {
        currentDate = shift.shift_date;
        message += `\nüìÖ *${currentDate}*\n`;
      }

      const status = shift.status === 'active' ? '‚úÖ' : 
                    shift.status === 'completed' ? '‚èπÔ∏è' : '‚ùå';
      
      message += `${status} @${shift.username} (${shift.full_name})\n`;
      message += `${shift.start_time}-${shift.end_time} ${shift.zone}`;
      if (shift.witag && shift.witag !== '–ù–µ—Ç') message += ` (${shift.witag})`;
      message += ` [ID:${shift.id}]\n`;
    }

    await ctx.replyWithMarkdown(message);
  } catch (err) {
    logger.error('admin_report error:', err);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞');
  }
});

bot.action('active_shifts', async (ctx) => {
  const username = ctx.from.username;
  if (!username || !isAdmin(username)) {
    return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }

  try {
    const shifts = await dbAll(
      "SELECT * FROM shifts WHERE status = 'active' ORDER BY shift_date, start_time"
    );

    if (!shifts.length) return ctx.reply('üìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω –Ω–µ—Ç');

    let message = 'üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã*\n';
    for (const shift of shifts) {
      message += `\nüÜî *${shift.id}* @${shift.username} (${shift.full_name})\n`;
      message += `üìÖ ${shift.shift_date} ‚è∞ ${shift.start_time}-${shift.end_time}\n`;
      message += `üìç ${shift.zone}`;
      if (shift.witag && shift.witag !== '–ù–µ—Ç') message += ` üîñ ${shift.witag}`;
    }

    await ctx.replyWithMarkdown(message);
  } catch (err) {
    logger.error('active_shifts error:', err);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω');
  }
});

bot.action('timesheet', async (ctx) => {
  const username = ctx.from.username;
  if (!username || !isAdmin(username)) {
    return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }

  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Google Sheets
    const timesheetData = [
      ["–ë–µ—Ä–∏–∫—É–ª—ã –ê–π—Å–∞—Ä –°–°", "8", "8", "8", "8", "8", "0", "8", "8", "8", "8", "8", "8", "8", "8", "8", "", "", "210000"],
      ["–ê–ª–∏–º–∂–∞–Ω –î–∞—Ä—Ö–∞–Ω", "8", "8", "16", "7", "16", "15", "", "8", "8", "8", "8", "8", "16", "8", "", "", "", "167500"]
    ];

    let message = 'üìù *–¢–∞–±–µ–ª—å —É—á–µ—Ç–∞*\n```\n';
    for (const row of timesheetData) {
      message += row.join('\t') + '\n';
    }
    message += '```';

    await ctx.replyWithMarkdown(message);
  } catch (err) {
    logger.error('timesheet error:', err);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ç–∞–±–µ–ª—è');
  }
});

bot.action(['end_shift_menu', 'cancel_shift_menu'], async (ctx) => {
  const username = ctx.from.username;
  if (!username || !isAdmin(username)) {
    return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }

  const action = ctx.callbackQuery.data === 'end_shift_menu' ? 'end' : 'cancel';

  try {
    const shifts = await dbAll(
      "SELECT id, username, full_name, start_time, end_time FROM shifts WHERE status = 'active'"
    );

    if (!shifts.length) return ctx.reply('üìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω –Ω–µ—Ç');

    const buttons = shifts.map(shift => [
      Markup.button.callback(
        `${shift.id} @${shift.username} ${shift.start_time}-${shift.end_time}`,
        `${action}_shift_${shift.id}`
      )
    ]);

    await ctx.reply(
      `–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É –¥–ª—è ${action === 'end' ? '–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è' : '–æ—Ç–º–µ–Ω—ã'}:`,
      Markup.inlineKeyboard(buttons)
    );
  } catch (err) {
    logger.error('shift menu error:', err);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã');
  }
});

bot.action(/^(end_shift_|cancel_shift_)(\d+)$/, async (ctx) => {
  const username = ctx.from.username;
  if (!username || !isAdmin(username)) {
    return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }

  const shiftId = parseInt(ctx.match[2]);
  const action = ctx.match[1].startsWith('end') ? 'end' : 'cancel';

  try {
    const shift = await dbGet(
      "SELECT username, full_name, start_time, end_time FROM shifts WHERE id = ?",
      [shiftId]
    );

    if (!shift) return ctx.reply('‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    await ctx.replyWithMarkdown(
      `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ ${action === 'end' ? '–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ' : '–æ—Ç–º–µ–Ω—É'} —Å–º–µ–Ω—ã:\n` +
      `üÜî *${shiftId}* @${shift.username} (${shift.full_name})\n` +
      `‚è∞ ${shift.start_time}-${shift.end_time}`,
      shiftActionsKeyboard(shiftId)
    );
  } catch (err) {
    logger.error('shift action error:', err);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
  }
});

bot.action(/^confirm_action_(\d+)$/, async (ctx) => {
  const username = ctx.from.username;
  if (!username || !isAdmin(username)) {
    return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }

  const shiftId = parseInt(ctx.match[1]);
  const action = ctx.callbackQuery.data.includes('end') ? 'completed' : 'canceled';

  try {
    const result = await dbRun(
      "UPDATE shifts SET status = ? WHERE id = ?",
      [action, shiftId]
    );

    if (result.changes > 0) {
      await ctx.reply(`‚úÖ –°–º–µ–Ω–∞ ${shiftId} ${action === 'completed' ? '–∑–∞–≤–µ—Ä—à–µ–Ω–∞' : '–æ—Ç–º–µ–Ω–µ–Ω–∞'}`);
    } else {
      await ctx.reply('‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  } catch (err) {
    logger.error('confirm action error:', err);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
  }
});

// Error handling
bot.catch((err, ctx) => {
  logger.error(`Error for ${ctx.updateType}:`, err);
  ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
});

// Start bot
bot.launch()
  .then(() => logger.info('Bot started'))
  .catch(err => {
    logger.error('Bot start failed:', err);
    process.exit(1);
  });

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
