import os
import re
import sqlite3
import logging
import fcntl
import sys
import asyncio
from datetime import datetime, time, timedelta
from typing import Dict, List
import pytz
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()

required_vars = [
    'BOT_TOKEN',
    'ZONE_A_CHAT_ID',
    'ZONE_B_CHAT_ID',
    'REPORT_CHAT_ID',
    'ADMIN_IDS',
    'GOOGLE_SHEETS_CREDENTIALS_PATH',
    'GOOGLE_SHEETS_ID'
]

for var in required_vars:
    if not os.getenv(var):
        logging.error(f'‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}')
        exit(1)

config = {
    'BOT_TOKEN': os.getenv('BOT_TOKEN'),
    'ZONE_A_CHAT_ID': int(os.getenv('ZONE_A_CHAT_ID')),
    'ZONE_B_CHAT_ID': int(os.getenv('ZONE_B_CHAT_ID')),
    'REPORT_CHAT_ID': int(os.getenv('REPORT_CHAT_ID')),
    'ADMIN_IDS': list(map(int, os.getenv('ADMIN_IDS').split(','))),
    'TIMEZONE': pytz.timezone(os.getenv('TIMEZONE', 'Asia/Almaty')),
    'CHECK_INTERVAL': int(os.getenv('CHECK_INTERVAL', '300')),
    'INACTIVITY_THRESHOLD': int(os.getenv('INACTIVITY_THRESHOLD', '1800')),
    'MORNING_SHIFT': (int(os.getenv('MORNING_SHIFT_START', '7')), int(os.getenv('MORNING_SHIFT_END', '15'))),
    'EVENING_SHIFT': (int(os.getenv('EVENING_SHIFT_START', '15')), int(os.getenv('EVENING_SHIFT_END', '23'))),
    'ZONE_NAMES': {
        'A': os.getenv('ZONE_A_NAME', '–û—Ç—á—ë—Ç—ã —Å–∫–∞—É—Ç–æ–≤ –ï.–û.–ú'),
        'B': os.getenv('ZONE_B_NAME', '10 –∞—É–º–∞“õ-–∑–æ–Ω–∞')
    },
    'GOOGLE_SHEETS_CREDENTIALS_PATH': os.getenv('GOOGLE_SHEETS_CREDENTIALS_PATH'),
    'GOOGLE_SHEETS_ID': os.getenv('GOOGLE_SHEETS_ID')
}

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

def acquire_lock():
    lock_file = 'bot.lock'
    try:
        fd = os.open(lock_file, os.O_CREAT | os.O_WRONLY)
        fcntl.flock(fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        return fd
    except (IOError, OSError):
        logger.error('‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.')
        sys.exit(1)

def init_google_sheets():
    scope = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    try:
        creds = Credentials.from_service_account_file(config['GOOGLE_SHEETS_CREDENTIALS_PATH'], scopes=scope)
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_key(config['GOOGLE_SHEETS_ID'])
        logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google Sheets!")
        return spreadsheet.worksheet("Sheet1")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}", exc_info=True)
        return None

def init_db():
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS shifts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            full_name TEXT,
            photo_file_id TEXT,
            shift_date TEXT,
            start_time TEXT,
            end_time TEXT,
            zone TEXT,
            witag TEXT,
            created_at TIMESTAMP,
            last_activity TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def add_shift_sqlite(user_id, full_name, photo_id, s_date, s_time, e_time, zone, witag):
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    current_time = datetime.now(config['TIMEZONE'])
    cur.execute('''
        INSERT INTO shifts (user_id, full_name, photo_file_id, shift_date, start_time, end_time, zone, witag, created_at, last_activity)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, full_name, photo_id, s_date, s_time, e_time, zone, witag, current_time, current_time))
    conn.commit()
    conn.close()

def update_user_activity(user_id):
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    current_time = datetime.now(config['TIMEZONE'])
    cur.execute('''
        UPDATE shifts 
        SET last_activity = ?
        WHERE user_id = ? AND shift_date = ?
    ''', (current_time, user_id, current_time.strftime('%d.%m.%y')))
    conn.commit()
    conn.close()

def get_active_users():
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    current_time = datetime.now(config['TIMEZONE'])
    threshold = current_time - timedelta(seconds=config['INACTIVITY_THRESHOLD'])
    
    cur.execute('''
        SELECT user_id, full_name, zone, last_activity 
        FROM shifts 
        WHERE shift_date = ? AND last_activity > ?
    ''', (current_time.strftime('%d.%m.%y'), threshold))
    
    active_users = cur.fetchall()
    conn.close()
    return active_users

def get_inactive_users():
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    current_time = datetime.now(config['TIMEZONE'])
    threshold = current_time - timedelta(seconds=config['INACTIVITY_THRESHOLD'])
    
    cur.execute('''
        SELECT user_id, full_name, zone, last_activity 
        FROM shifts 
        WHERE shift_date = ? AND last_activity <= ?
    ''', (current_time.strftime('%d.%m.%y'), threshold))
    
    inactive_users = cur.fetchall()
    conn.close()
    return inactive_users

try:
    bot = Bot(token=config['BOT_TOKEN'])
    storage = MemoryStorage()
    dp = Dispatcher(bot, storage=storage)
    logger.info("ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    exit(1)

worksheet = init_google_sheets()
init_db()

def get_current_shift() -> str:
    now = datetime.now(config['TIMEZONE']).hour
    if config['MORNING_SHIFT'][0] <= now < config['MORNING_SHIFT'][1]:
        return 'morning'
    elif config['EVENING_SHIFT'][0] <= now < config['EVENING_SHIFT'][1]:
        return 'evening'
    return None

def is_valid_time(time_str, fmt='%H:%M'):
    try:
        datetime.strptime(time_str, fmt).time()
        return True
    except ValueError:
        return False

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply(
        "üëã –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Å–º–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        "üìå –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–º–µ–Ω—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "```\n"
        "–ò–º—è –§–∞–º–∏–ª–∏—è\n"
        "07:00 15:00\n"
        "–ó–æ–Ω–∞ 12\n"
        "W witag 5 (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "```\n\n"
        "üìä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
        "/report - –æ—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–∞–º\n"
        "/activity - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        parse_mode=ParseMode.MARKDOWN
    )

@dp.message_handler(content_types=['photo'])
async def handle_photo_with_caption(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    if chat_id not in [config['ZONE_A_CHAT_ID'], config['ZONE_B_CHAT_ID']]:
        return

    user_full_name = message.from_user.full_name
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user_full_name} (ID: {user_id}).")

    if not message.caption:
        await message.reply("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")
        return

    shift_date = datetime.now(config['TIMEZONE']).strftime('%d.%m.%y')

    pattern = re.compile(
        r'^(?P<name>[\w\s–ê-–Ø–∞-—è]+)\s+'
        r'(?P<start_time>\d{2}:\d{2})\s(?P<end_time>\d{2}:\d{2})\s+'
        r'(?P<zone>–ó–æ–Ω–∞\s+\d+)\s*'
        r'(?P<witag_val>W\s+witag\s+\d+)?$',
        re.MULTILINE | re.IGNORECASE
    )
    
    cleaned_caption = message.caption.strip()
    match = pattern.match(cleaned_caption)

    if not match:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏. –ü—Ä–∏–º–µ—Ä:\n"
            "```\n"
            "–ò–º—è –§–∞–º–∏–ª–∏—è\n"
            "07:00 15:00\n"
            "–ó–æ–Ω–∞ 12\n"
            "```",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    full_name = match.group('name').strip()
    start_time_str = match.group('start_time')
    end_time_str = match.group('end_time')
    zone = match.group('zone').strip()
    witag = match.group('witag_val').strip() if match.group('witag_val') else "–ù–µ—Ç"

    if not is_valid_time(start_time_str) or not is_valid_time(end_time_str):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú).")
        return

    try:
        new_start_time = datetime.strptime(start_time_str, '%H:%M').time()
        new_end_time = datetime.strptime(end_time_str, '%H:%M').time()

        if new_start_time >= new_end_time:
            await message.reply("‚ùå –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
            return
    except Exception:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.")
        return

    photo_file_id = message.photo[-1].file_id
    current_time = datetime.now(config['TIMEZONE'])
    
    try:
        add_shift_sqlite(user_id, full_name, photo_file_id, shift_date, start_time_str, end_time_str, zone, witag)
        
        if worksheet:
            add_shift_gsheets(worksheet, user_id, full_name, photo_file_id, shift_date, 
                             start_time_str, end_time_str, zone, witag, current_time.isoformat())
        
        logger.info(f"–°–º–µ–Ω–∞ –¥–ª—è {full_name} –Ω–∞ {shift_date} ({start_time_str}-{end_time_str}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        await message.reply(
            f"‚úÖ **{full_name}** –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Å–º–µ–Ω—É.\n"
            f"–î–∞—Ç–∞: `{shift_date}`\n"
            f"–í—Ä–µ–º—è: `{start_time_str}-{end_time_str}`\n"
            f"–ó–æ–Ω–∞: `{zone}`\n"
            f"Witag: `{witag}`",
            parse_mode=ParseMode.MARKDOWN
        )
        
        update_user_activity(user_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}", exc_info=True)
        await message.reply("‚ùóÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def check_activity():
    while True:
        current_shift = get_current_shift()
        if not current_shift:
            await asyncio.sleep(config['CHECK_INTERVAL'])
            continue

        inactive_users = get_inactive_users()
        if inactive_users:
            message = f"‚ö†Ô∏è <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({current_shift} —Å–º–µ–Ω–∞)</b>\n\n"
            
            for user_id, full_name, zone, last_activity in inactive_users:
                last_time = last_activity.strftime('%H:%M:%S') if last_activity else "–Ω–∏–∫–æ–≥–¥–∞"
                message += f"‚Ä¢ {full_name} ({zone}) - –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_time}\n"
            
            try:
                await bot.send_message(config['REPORT_CHAT_ID'], message, parse_mode='HTML')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await asyncio.sleep(config['CHECK_INTERVAL'])

@dp.message_handler(commands=['activity'])
async def check_activity_command(message: types.Message):
    if message.from_user.id not in config['ADMIN_IDS']:
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    inactive_users = get_inactive_users()
    if not inactive_users:
        await message.reply("‚úÖ –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã!")
        return

    response = "‚ö†Ô∏è <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:</b>\n\n"
    for user_id, full_name, zone, last_activity in inactive_users:
        last_time = last_activity.strftime('%H:%M:%S') if last_activity else "–Ω–∏–∫–æ–≥–¥–∞"
        response += f"‚Ä¢ {full_name} ({zone}) - –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_time}\n"
    
    await message.reply(response, parse_mode='HTML')

@dp.message_handler(commands=['report'])
async def get_report(message: types.Message):
    if message.from_user.id not in config['ADMIN_IDS']:
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    today_date_str = datetime.now(config['TIMEZONE']).strftime('%d.%m.%y')
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute("SELECT full_name, start_time, end_time, zone, witag FROM shifts WHERE shift_date = ?", (today_date_str,))
    shifts = cur.fetchall()
    conn.close()

    if not shifts:
        await message.reply(f"üìÑ –ù–∞ **{today_date_str}** —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode=ParseMode.MARKDOWN)
        return

    morning_shift = []
    evening_shift = []
    full_day_shift = []

    for name, start, end, zone, witag in shifts:
        shift_info = f"  - `{name}` ({zone}, Witag: {witag})"
        if start == "07:00" and end == "15:00":
            morning_shift.append(shift_info)
        elif start == "15:00" and end == "23:00":
            evening_shift.append(shift_info)
        elif start == "07:00" and end == "23:00":
            full_day_shift.append(shift_info)

    total = len(morning_shift) + len(evening_shift) + len(full_day_shift)

    report = [
        f"**üìä –û—Ç—á–µ—Ç –Ω–∞ {today_date_str}**",
        f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total}**\n",
        f"**‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ (07:00-15:00): {len(morning_shift)}**"
    ] + morning_shift + [
        "\n**üåô –í–µ—á–µ—Ä–Ω—è—è —Å–º–µ–Ω–∞ (15:00-23:00): {len(evening_shift)}**"
    ] + evening_shift + [
        "\n**üåû –ü–æ–ª–Ω—ã–π –¥–µ–Ω—å (07:00-23:00): {len(full_day_shift)}**"
    ] + full_day_shift

    await message.reply("\n".join(report), parse_mode=ParseMode.MARKDOWN)

async def on_startup(_):
    asyncio.create_task(check_activity())
    try:
        await bot.send_message(config['ADMIN_IDS'][0], 'ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

if __name__ == '__main__':
    lock_fd = acquire_lock()
    try:
        executor.start_polling(
            dp,
            on_startup=on_startup,
            skip_updates=True
        )
    finally:
        fcntl.flock(lock_fd, fcntl.LOCK_UN)
        os.close(lock_fd)
        try:
            os.remove('bot.lock')
        except:
            pass
        logger.info('–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É')
