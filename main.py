import os
import re
import sqlite3
import logging
from datetime import datetime
import pytz

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
GROUP_TIMEZONE = pytz.timezone('Etc/GMT-5') # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+5

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite ---
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS shifts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            full_name TEXT,
            photo_file_id TEXT,
            shift_date TEXT,
            start_time TEXT,
            end_time TEXT,
            zone TEXT,
            witag TEXT,
            created_at TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def add_shift(user_id, full_name, photo_id, s_date, s_time, e_time, zone, witag):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å–º–µ–Ω—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute('''
        INSERT INTO shifts (user_id, full_name, photo_file_id, shift_date, start_time, end_time, zone, witag, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, full_name, photo_id, s_date, s_time, e_time, zone, witag, datetime.now(GROUP_TIMEZONE)))
    conn.commit()
    conn.close()

def get_shifts_for_date(report_date):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–º–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute("SELECT full_name, start_time, end_time, zone, witag FROM shifts WHERE shift_date = ?", (report_date,))
    rows = cur.fetchall()
    conn.close()
    return rows

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Å–º–µ–Ω. \n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ò–º—è –§–∞–º–∏–ª–∏—è\n"
        "–¥–¥.–º–º.–≥–≥\n"
        "—á—á:–º–º —á—á:–º–º\n"
        "–ó–æ–Ω–∞ XX\n"
        "W witag XX (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
    )


@dp.message_handler(content_types=['photo'])
async def handle_photo_with_caption(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é, –ø–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    if not message.caption:
        return

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    pattern = re.compile(
        r'^(?P<name>[\w\s–ê-–Ø–∞-—è]+)\n'
        r'(?P<date>\d{2}\.\d{2}\.\d{2,4})\n'
        r'(?P<start_time>\d{2}:\d{2})\s(?P<end_time>\d{2}:\d{2})\n'
        r'(?P<zone>–ó–æ–Ω–∞\s\d+)\s*'
        r'(?P<witag>W\s+witag\s+\d+)?$',
        re.MULTILINE | re.IGNORECASE
    )

    match = pattern.match(message.caption.strip())

    if not match:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–¥–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = match.groupdict()
    full_name = data['name'].strip()
    shift_date = data['date']
    start_time = data['start_time']
    end_time = data['end_time']
    zone = data['zone'].strip()
    witag = data['witag'].strip() if data['witag'] else "–ù–µ—Ç"
    photo_file_id = message.photo[-1].file_id
    user_id = message.from_user.id

    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        datetime.strptime(shift_date, '%d.%m.%y')
        add_shift(user_id, full_name, photo_file_id, shift_date, start_time, end_time, zone, witag)
        await message.reply(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ **{full_name}** —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Å–º–µ–Ω—É.", parse_mode=ParseMode.MARKDOWN)
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")
        await message.reply("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message_handler(commands=['report'])
async def get_report(message: types.Message):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–∞–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    –û—Ç—á–µ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É UTC+5.
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
    try:
        chat_admins = await bot.get_chat_administrators(chat_id)
        admin_ids = {admin.user.id for admin in chat_admins}
        if user_id not in admin_ids:
            await message.reply("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã.", parse_mode=ParseMode.MARKDOWN)
            return
    except Exception as e:
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        await message.reply("üö´ –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today_date_str = datetime.now(GROUP_TIMEZONE).strftime('%d.%m.%y')
    shifts = get_shifts_for_date(today_date_str)

    if not shifts:
        await message.reply(f"üìÑ –ù–∞ {today_date_str} —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é –∏ –≤–µ—á–µ—Ä–Ω—é—é —Å–º–µ–Ω—ã
    morning_shift_employees = []
    evening_shift_employees = []
    
    for name, start, end, zone, witag in shifts:
        shift_info = f"  - `{name}` ({zone}, Witag: {witag})"
        if start == "07:00" and end == "15:00":
            morning_shift_employees.append(shift_info)
        elif start == "15:00" and end == "23:00":
            evening_shift_employees.append(shift_info)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    report_text = [f"**–û—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–∞–º –Ω–∞ {today_date_str}**\n"]
    
    if morning_shift_employees:
        report_text.append("**‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ (07:00 - 15:00):**")
        report_text.extend(morning_shift_employees)
    else:
        report_text.append("**‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ (07:00 - 15:00):**\n  - *–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤*")
    
    report_text.append("\n") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    
    if evening_shift_employees:
        report_text.append("**üåô –í–µ—á–µ—Ä–Ω—è—è —Å–º–µ–Ω–∞ (15:00 - 23:00):**")
        report_text.extend(evening_shift_employees)
    else:
        report_text.append("**üåô –í–µ—á–µ—Ä–Ω—è—è —Å–º–µ–Ω–∞ (15:00 - 23:00):**\n  - *–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤*")

    await message.reply("\n".join(report_text), parse_mode=ParseMode.MARKDOWN)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    init_db()  # –°–æ–∑–¥–∞–µ–º –ë–î –∏ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    executor.start_polling(dp, skip_updates=True)