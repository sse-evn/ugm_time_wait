import os
import re
import sqlite3
import logging
from datetime import datetime, timedelta
import pytz
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv
from collections import defaultdict
from gspread_formatting import *

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    logging.error("BOT_TOKEN is not set")
    raise ValueError("BOT_TOKEN is not set")
logging.info(f"Loaded BOT_TOKEN: {API_TOKEN[:10]}...")
GROUP_TIMEZONE = pytz.timezone('Asia/Almaty')
GOOGLE_SHEETS_ID = "1QWCYpeBQGofESEkD4WWYAIl0fvVDt7VZvWOE-qKe_RE"

ADMIN_IDS_STR = os.getenv("ADMIN_IDS")
if ADMIN_IDS_STR:
    ADMIN_IDS = {int(uid.strip()) for uid in ADMIN_IDS_STR.split(',')}
else:
    ADMIN_IDS = set()

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

def init_google_sheets():
    scope = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_file(os.getenv("GOOGLE_SHEETS_CREDENTIALS_PATH"), scopes=scope)
    client = gspread.authorize(creds)
    spreadsheet = client.open_by_key(GOOGLE_SHEETS_ID)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ "Report"
    try:
        report_worksheet = spreadsheet.worksheet("Report")
    except gspread.exceptions.WorksheetNotFound:
        report_worksheet = spreadsheet.add_worksheet(title="Report", rows=100, cols=10)
        report_worksheet.update(range_name="A1:E1", values=[['–î–∞—Ç–∞', '–ò–º—è', '–í—Ä–µ–º—è', '–ó–æ–Ω–∞', 'Witag']])
        set_row_height(report_worksheet, '1', 40)
        set_column_width(report_worksheet, 'A:E', 120)
        fmt = CellFormat(
            backgroundColor=Color(0.9, 0.9, 0.9),
            textFormat=TextFormat(bold=True),
            horizontalAlignment='CENTER'
        )
        format_cell_range(report_worksheet, 'A1:E1', fmt)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ "Timesheet"
    try:
        timesheet_worksheet = spreadsheet.worksheet("Timesheet")
    except gspread.exceptions.WorksheetNotFound:
        timesheet_worksheet = spreadsheet.add_worksheet(title="Timesheet", rows=100, cols=40)
        
        headers = ["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"] + [str(i) for i in range(1, 32)] + ["–ò—Ç–æ–≥–æ"]
        column_count = len(headers)  # 34
        end_column_letter = chr(ord('A') + column_count - 1)  # AH
        range_str = f"A1:{end_column_letter}1"
        
        timesheet_worksheet.update(range_name=range_str, values=[headers])
        set_column_width(timesheet_worksheet, f"A:{end_column_letter}", 60)
        fmt = CellFormat(
            backgroundColor=Color(0.9, 0.9, 0.9),
            textFormat=TextFormat(bold=True),
            horizontalAlignment='CENTER'
        )
        format_cell_range(timesheet_worksheet, range_str, fmt)
    
    # –ü–æ–ª—É—á–∞–µ–º "Sheet1", –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
    try:
        worksheet = spreadsheet.worksheet("Sheet1")
    except gspread.exceptions.WorksheetNotFound:
        worksheet = spreadsheet.add_worksheet(title="Sheet1", rows=100, cols=10)

    return worksheet, report_worksheet, timesheet_worksheet

def init_db():
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS shifts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            full_name TEXT,
            photo_file_id TEXT,
            shift_date TEXT,
            start_time TEXT,
            end_time TEXT,
            actual_end_time TEXT,
            worked_hours TEXT,
            zone TEXT,
            witag TEXT,
            status TEXT DEFAULT 'active',
            created_at TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def add_shift_sqlite(user_id, full_name, photo_id, s_date, s_time, e_time, zone, witag):
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    current_time_utc5 = datetime.now(GROUP_TIMEZONE)
    cur.execute('''
        INSERT INTO shifts (user_id, full_name, photo_file_id, shift_date, start_time, end_time, actual_end_time, worked_hours, zone, witag, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, full_name, photo_id, s_date, s_time, e_time, None, None, zone, witag, current_time_utc5))
    conn.commit()
    shift_id = cur.lastrowid
    conn.close()
    return shift_id

def update_shift_status(shift_id, status):
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute("UPDATE shifts SET status = ? WHERE id = ?", (status, shift_id))
    conn.commit()
    affected_rows = cur.rowcount
    conn.close()
    return affected_rows > 0

def get_active_shifts():
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute("SELECT id, user_id, full_name, shift_date, start_time, end_time, zone FROM shifts WHERE status = 'active'")
    rows = cur.fetchall()
    conn.close()
    return rows

def get_all_shifts_sqlite():
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM shifts")
    rows = cur.fetchall()
    conn.close()
    return rows

def get_user_shifts_sqlite(user_id):
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM shifts WHERE user_id = ?", (user_id,))
    rows = cur.fetchall()
    conn.close()
    return rows

def get_today_shifts_sqlite(today_date):
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM shifts WHERE shift_date = ?", (today_date,))
    rows = cur.fetchall()
    conn.close()
    return rows

def get_user_shifts_for_date_sqlite(user_id, shift_date):
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute("SELECT start_time, end_time FROM shifts WHERE user_id = ? AND shift_date = ?", (user_id, shift_date))
    rows = cur.fetchall()
    conn.close()
    return rows

def is_valid_time(time_str, fmt='%H:%M'):
    try:
        datetime.strptime(time_str, fmt).time()
        return True
    except ValueError:
        return False

def calculate_worked_hours(start_time_str, end_time_str):
    start = datetime.strptime(start_time_str, '%H:%M')
    end = datetime.strptime(end_time_str, '%H:%M')
    if end < start:
        end = end.replace(day=end.day + 1)
    duration = end - start
    hours, remainder = divmod(int(duration.total_seconds()), 3600)
    minutes, _ = divmod(remainder, 60)
    return f"{hours}h {minutes}m" if hours or minutes else "0h 0m"

def get_admin_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–∞–º", callback_data="admin_report"),
        InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã", callback_data="active_shifts"),
        InlineKeyboardButton("üìù –¢–∞–±–µ–ª—å —É—á–µ—Ç–∞", callback_data="timesheet"),
        InlineKeyboardButton("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", callback_data="end_shift_menu"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–º–µ–Ω—É", callback_data="cancel_shift_menu")
    )
    return keyboard

def get_shift_actions_keyboard(shift_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_action_{shift_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")
    )
    return keyboard

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    await message.reply("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())

@dp.callback_query_handler(lambda c: c.data == 'admin_report')
async def process_admin_report(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    shifts = get_all_shifts_sqlite()
    if not shifts:
        await bot.send_message(callback_query.from_user.id, "üìÑ –°–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    report_text = ["üìä –û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Å–º–µ–Ω–∞–º"]
    for shift in shifts:
        report_text.append(
            f"\nüìÖ {shift[4]} | üë§ {shift[2]} | ‚è∞ {shift[5]}-{shift[6]} | "
            f"üìç {shift[9]} | üîñ {shift[10]} | {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if len(shift) > 11 and shift[11] == 'active' else '‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∞'}"
        )
    
    await bot.send_message(callback_query.from_user.id, "\n".join(report_text))

@dp.callback_query_handler(lambda c: c.data == 'active_shifts')
async def process_active_shifts(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    active_shifts = get_active_shifts()
    if not active_shifts:
        await bot.send_message(callback_query.from_user.id, "üìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω –Ω–µ—Ç.")
        return
    
    report_text = ["üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã"]
    for shift in active_shifts:
        report_text.append(
            f"\nüÜî {shift[0]} | üë§ {shift[2]} | üìÖ {shift[3]} | ‚è∞ {shift[4]}-{shift[5]} | "
            f"üìç {shift[6]}"
        )
    
    await bot.send_message(callback_query.from_user.id, "\n".join(report_text))

@dp.callback_query_handler(lambda c: c.data in ['end_shift_menu', 'cancel_shift_menu'])
async def process_shift_action_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    action = "end" if callback_query.data == 'end_shift_menu' else "cancel"
    active_shifts = get_active_shifts()
    
    if not active_shifts:
        await bot.send_message(callback_query.from_user.id, "üìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω –Ω–µ—Ç.")
        return
    
    keyboard = InlineKeyboardMarkup()
    for shift in active_shifts:
        keyboard.add(InlineKeyboardButton(
            f"üÜî {shift[0]} | üë§ {shift[2]} | ‚è∞ {shift[4]}-{shift[5]}",
            callback_data=f"{action}_shift_{shift[0]}"
        ))
    
    action_text = "–∑–∞–≤–µ—Ä—à–∏—Ç—å" if action == "end" else "–æ—Ç–º–µ–Ω–∏—Ç—å"
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É –¥–ª—è {action_text}:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith(('end_shift_', 'cancel_shift_')))
async def process_shift_action(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    shift_id = int(callback_query.data.split('_')[-1])
    action = callback_query.data.split('_')[0]
    
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ {'–∑–∞–≤–µ—Ä—à–∏—Ç—å' if action == 'end' else '–æ—Ç–º–µ–Ω–∏—Ç—å'} —Å–º–µ–Ω—É ID {shift_id}?",
        reply_markup=get_shift_actions_keyboard(shift_id)
    )

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_action_'))
async def process_confirm_action(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    shift_id = int(callback_query.data.split('_')[-1])
    status = 'completed' if 'end' in callback_query.data else 'canceled'
    success = update_shift_status(shift_id, status)
    
    if success:
        await bot.send_message(callback_query.from_user.id, f"‚úÖ –°–º–µ–Ω–∞ ID {shift_id} —É—Å–ø–µ—à–Ω–æ {'–∑–∞–≤–µ—Ä—à–µ–Ω–∞' if status == 'completed' else '–æ—Ç–º–µ–Ω–µ–Ω–∞'}")
    else:
        await bot.send_message(callback_query.from_user.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–º–µ–Ω—É ID {shift_id}")

@dp.callback_query_handler(lambda c: c.data == 'timesheet')
async def process_timesheet(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    timesheet_data = [
        ["–ë–µ—Ä–∏–∫—É–ª—ã –ê–π—Å–∞—Ä –°–°", "TRUE", "TRUE", "TRUE", "TRUE", "TRUE", "FALSE", "TRUE", "TRUE", "TRUE", "TRUE", "TRUE", "TRUE", "TRUE", "TRUE", "TRUE", "", "", "210000", "TRUE", "TRUE", "TRUE", "TRUE", "FALSE", "TRUE", "TRUE", "TRUE", "TRUE", "TRUE", "FALSE", "FALSE", "FALSE", "FALSE", "FALSE", "FALSE", "", "", "135000"],
        ["–ê–ª–∏–º–∂–∞–Ω –î–∞—Ä—Ö–∞–Ω", "8", "8", "16", "7", "16", "15", "", "8", "8", "8", "8", "8", "16", "8", "", "", "", "167500", "8", "8", "8", "8", "", "8", "8", "8", "7", "", "", "", "", "", "", "", "", "", "78750"],
    ]
    
    message_text = "üìä –¢–∞–±–µ–ª—å —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n\n"
    for row in timesheet_data:
        message_text += " | ".join(str(item) for item in row) + "\n"
    
    await bot.send_message(callback_query.from_user.id, f"<pre>{message_text}</pre>", parse_mode=ParseMode.HTML)

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply(
        "üëã –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Å–º–µ–Ω.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "```\n"
        "–ï—Ä–±–∞–∫—ã—Ç –ú—É—Ä–∞—Ç–±–µ–∫\n"
        "07:00 15:00\n"
        "–ó–æ–Ω–∞ 12\n"
        "W witag 5\n"
        "```\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "- /myshifts - –í–∞—à–∏ —Å–º–µ–Ω—ã\n"
        "- /today - –°–º–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è\n"
        "- /admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞",
        parse_mode=ParseMode.MARKDOWN
    )

@dp.message_handler(content_types=['photo'])
async def handle_photo_with_caption(message: types.Message):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name

    if not message.caption:
        await message.reply("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")
        return

    shift_date = datetime.now(GROUP_TIMEZONE).strftime('%d.%m.%y')

    pattern = re.compile(
        r'^(?P<name>[\w\s–ê-–Ø–∞-—è]+)\s+'
        r'(?P<start_time>\d{2}:\d{2})\s(?P<end_time>\d{2}:\d{2})\s+'
        r'(?P<zone>–ó–æ–Ω–∞\s+\d+)\s*'
        r'(?P<witag_val>W\s+witag\s+\d+)?$',
        re.MULTILINE | re.IGNORECASE
    )
    
    match = pattern.match(message.caption.strip())

    if not match:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏.\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "```\n"
            "–ï—Ä–±–∞–∫—ã—Ç –ú—É—Ä–∞—Ç–±–µ–∫\n"
            "07:00 15:00\n"
            "–ó–æ–Ω–∞ 12\n"
            "```",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    full_name = match.group('name').strip()
    start_time_str = match.group('start_time')
    end_time_str = match.group('end_time')
    zone = match.group('zone').strip()
    witag = match.group('witag_val').strip() if match.group('witag_val') else "–ù–µ—Ç"

    if not is_valid_time(start_time_str) or not is_valid_time(end_time_str):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú).")
        return

    try:
        new_start_time = datetime.strptime(start_time_str, '%H:%M').time()
        new_end_time = datetime.strptime(end_time_str, '%H:%M').time()

        if new_start_time >= new_end_time:
            await message.reply("‚ùå –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
            return
    except Exception:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏.")
        return

    existing_shifts = get_user_shifts_for_date_sqlite(user_id, shift_date)
    for existing_start_str, existing_end_str in existing_shifts:
        existing_start_time = datetime.strptime(existing_start_str, '%H:%M').time()
        existing_end_time = datetime.strptime(existing_end_str, '%H:%M').time()

        if (new_start_time < existing_end_time) and (new_end_time > existing_start_time):
            await message.reply(
                f"‚ùå –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ–Ω–æ–π "
                f"({existing_start_str}-{existing_end_str})"
            )
            return

    try:
        shift_id = add_shift_sqlite(user_id, full_name, message.photo[-1].file_id, shift_date, start_time_str, end_time_str, zone, witag)
        await message.reply(
            f"‚úÖ **{full_name}** –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Å–º–µ–Ω—É.\n"
            f"üìÖ –î–∞—Ç–∞: `{shift_date}`\n"
            f"‚è∞ –í—Ä–µ–º—è: `{start_time_str}-{end_time_str}`\n"
            f"üìç –ó–æ–Ω–∞: `{zone}`\n"
            f"üîñ Witag: `{witag}`",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")
        await message.reply("‚ùóÔ∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(commands=['myshifts'])
async def get_my_shifts(message: types.Message):
    user_id = message.from_user.id
    shifts = get_user_shifts_sqlite(user_id)
    
    if not shifts:
        await message.reply("üìÑ –£ –≤–∞—Å –Ω–µ—Ç —Å–º–µ–Ω.", parse_mode=ParseMode.MARKDOWN)
        return

    shifts_by_date = defaultdict(list)
    for shift in shifts:
        shift_id, _, full_name, shift_date, start_time, end_time, _, _, _, zone, witag, status, _ = shift
        shift_type = (
            "‚òÄÔ∏è –£—Ç—Ä–æ" if start_time == "07:00" and end_time == "15:00" else
            "üåô –í–µ—á–µ—Ä" if start_time == "15:00" and end_time == "23:00" else
            "üóìÔ∏è –ü–æ–ª–Ω—ã–π –¥–µ–Ω—å" if start_time == "07:00" and end_time == "23:00" else
            "‚è∞ –î—Ä—É–≥–æ–µ"
        )
        shifts_by_date[shift_date].append({
            'shift_id': shift_id,
            'full_name': full_name,
            'start_time': start_time,
            'end_time': end_time,
            'zone': zone,
            'witag': witag,
            'status': status,
            'shift_type': shift_type
        })

    report_text = [f"**üìã –í–∞—à–∏ —Å–º–µ–Ω—ã, {message.from_user.full_name}**"]
    
    for shift_date in sorted(shifts_by_date.keys(), reverse=True):
        report_text.append(f"\n**üìÖ {shift_date}**")
        report_text.append("```")
        report_text.append("| ID | –¢–∏–ø —Å–º–µ–Ω—ã       | –í—Ä–µ–º—è        | –ó–æ–Ω–∞      | –°—Ç–∞—Ç—É—Å   |")
        report_text.append("|----|-----------------|--------------|-----------|----------|")
        
        for shift in shifts_by_date[shift_date]:
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if shift['status'] == 'active' else "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∞" if shift['status'] == 'completed' else "üö´ –û—Ç–º–µ–Ω–µ–Ω–∞"
            report_text.append(
                f"| {shift['shift_id']:<2} | {shift['shift_type']:<15} | {shift['start_time']}-{shift['end_time']} | {shift['zone']:<9} | {status:<8} |"
            )
        
        report_text.append("```")

    await message.reply("\n".join(report_text), parse_mode=ParseMode.MARKDOWN)

@dp.message_handler(commands=['today'])
async def get_today_shifts(message: types.Message):
    today_date = datetime.now(GROUP_TIMEZONE).strftime('%d.%m.%y')
    shifts = get_today_shifts_sqlite(today_date)
    
    if not shifts:
        await message.reply(f"üìÑ –ù–∞ {today_date} —Å–º–µ–Ω –Ω–µ—Ç.", parse_mode=ParseMode.MARKDOWN)
        return

    report_text = [f"**üìÖ –°–º–µ–Ω—ã –∑–∞ {today_date}**"]
    report_text.append("```")
    report_text.append("| –¢–∏–ø —Å–º–µ–Ω—ã       | –ò–º—è              | –í—Ä–µ–º—è        | –ó–æ–Ω–∞      | –°—Ç–∞—Ç—É—Å   |")
    report_text.append("|-----------------|------------------|--------------|-----------|----------|")

    for shift in shifts:
        _, _, full_name, _, start_time, end_time, _, _, _, zone, _, status, _ = shift
        shift_type = (
            "‚òÄÔ∏è –£—Ç—Ä–æ" if start_time == "07:00" and end_time == "15:00" else
            "üåô –í–µ—á–µ—Ä" if start_time == "15:00" and end_time == "23:00" else
            "üóìÔ∏è –ü–æ–ª–Ω—ã–π –¥–µ–Ω—å" if start_time == "07:00" and end_time == "23:00" else
            "‚è∞ –î—Ä—É–≥–æ–µ"
        )
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if status == 'active' else "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∞" if status == 'completed' else "üö´ –û—Ç–º–µ–Ω–µ–Ω–∞"
        report_text.append(
            f"| {shift_type:<15} | {full_name:<16} | {start_time}-{end_time} | {zone:<9} | {status:<8} |"
        )

    report_text.append("```")
    await message.reply("\n".join(report_text), parse_mode=ParseMode.MARKDOWN)

if __name__ == '__main__':
    init_db()
    try:
        worksheet, report_worksheet, timesheet_worksheet = init_google_sheets()
    except Exception as e:
        logging.error(f"Google Sheets init failed: {e}")
        worksheet, report_worksheet, timesheet_worksheet = None, None, None
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
