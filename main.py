import os
import re
import sqlite3
import logging
from datetime import datetime, time
import pytz

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
GROUP_TIMEZONE = pytz.timezone('Etc/GMT-5') # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+5

# --- ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ .env ---
ADMIN_IDS_STR = os.getenv("ADMIN_IDS")
if ADMIN_IDS_STR:
    try:
        ADMIN_IDS = {int(uid.strip()) for uid in ADMIN_IDS_STR.split(',')}
    except ValueError:
        logging.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ADMIN_IDS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env: —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        ADMIN_IDS = set()
else:
    ADMIN_IDS = set()

if not ADMIN_IDS:
    logging.warning("ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏. –ö–æ–º–∞–Ω–¥–∞ /report –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite ---
def init_db():
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS shifts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            full_name TEXT,
            photo_file_id TEXT,
            shift_date TEXT,
            start_time TEXT,
            end_time TEXT,
            zone TEXT,
            witag TEXT,
            created_at TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def add_shift(user_id, full_name, photo_id, s_date, s_time, e_time, zone, witag):
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute('''
        INSERT INTO shifts (user_id, full_name, photo_file_id, shift_date, start_time, end_time, zone, witag, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, full_name, photo_id, s_date, s_time, e_time, zone, witag, datetime.now(GROUP_TIMEZONE)))
    conn.commit()
    conn.close()

def get_shifts_for_date(report_date):
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute("SELECT full_name, start_time, end_time, zone, witag FROM shifts WHERE shift_date = ?", (report_date,))
    rows = cur.fetchall()
    conn.close()
    return rows

def get_user_shifts_for_date(user_id, shift_date):
    conn = sqlite3.connect('shifts.db')
    cur = conn.cursor()
    cur.execute("SELECT start_time, end_time FROM shifts WHERE user_id = ? AND shift_date = ?", (user_id, shift_date))
    rows = cur.fetchall()
    conn.close()
    return rows

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ---
def is_valid_time(time_str, fmt='%H:%M'):
    try:
        datetime.strptime(time_str, fmt).time()
        return True
    except ValueError:
        return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
    await message.reply(
        "üëã –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Å–º–µ–Ω.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é **–ø–æ—Å—Ç—Ä–æ—á–Ω–æ** –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "```\n"
        "–ï—Ä–±–∞–∫—ã—Ç –ú—É—Ä–∞—Ç–±–µ–∫\n"
        "07:00 15:00\n"
        "–ó–æ–Ω–∞ 12\n"
        "W witag 5 (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "```\n\n"
        "**–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ Enter!** –î–∞—Ç–∞ —Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–º–µ–Ω—É –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å: `07:00 23:00`",
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(content_types=['photo'])
async def handle_photo_with_caption(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é, –ø–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user_full_name} (ID: {user_id}).")

    if not message.caption:
        await message.reply("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")
        return

    shift_date = datetime.now(GROUP_TIMEZONE).strftime('%d.%m.%y')

    pattern = re.compile(
        r'^(?P<name>[\w\s–ê-–Ø–∞-—è]+)\s+'
        r'(?P<start_time>\d{2}:\d{2})\s(?P<end_time>\d{2}:\d{2})\s+'
        r'(?P<zone>–ó–æ–Ω–∞\s+\d+)\s*'
        r'(?P<witag_val>W\s+witag\s+\d+)?$',
        re.MULTILINE | re.IGNORECASE
    )
    
    cleaned_caption = message.caption.strip()
    match = pattern.match(cleaned_caption)

    if not match:
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏ –æ—Ç {user_full_name}: '{message.caption}'")
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏. **–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ Enter!**\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "```\n"
            "–ï—Ä–±–∞–∫—ã—Ç –ú—É—Ä–∞—Ç–±–µ–∫\n"
            "07:00 15:00\n"
            "–ó–æ–Ω–∞ 12\n"
            "```",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    full_name = match.group('name').strip()
    start_time_str = match.group('start_time')
    end_time_str = match.group('end_time')
    zone = match.group('zone').strip()
    witag = match.group('witag_val').strip() if match.group('witag_val') else "–ù–µ—Ç"

    photo_file_id = message.photo[-1].file_id

    # --- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ ---
    if not is_valid_time(start_time_str) or not is_valid_time(end_time_str):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú).")
        return

    try:
        new_start_time = datetime.strptime(start_time_str, '%H:%M').time()
        new_end_time = datetime.strptime(end_time_str, '%H:%M').time()

        if new_start_time >= new_end_time:
            await message.reply("‚ùå –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
            return
    except Exception:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.")
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–º–µ–Ω ---
    existing_shifts = get_user_shifts_for_date(user_id, shift_date)
    
    for existing_start_str, existing_end_str in existing_shifts:
        existing_start_time = datetime.strptime(existing_start_str, '%H:%M').time()
        existing_end_time = datetime.strptime(existing_end_str, '%H:%M').time()

        if (new_start_time < existing_end_time) and (new_end_time > existing_start_time):
            await message.reply(
                f"‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–º–µ–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —ç—Ç–∏–º –≤—Ä–µ–º–µ–Ω–µ–º "
                f"({existing_start_str}-{existing_end_str}) –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. "
                f"–ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –¥–≤–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Å–º–µ–Ω—ã."
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_full_name} (ID: {user_id}) –ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â—É—é—Å—è —Å–º–µ–Ω—É.")
            return

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã ---
    try:
        add_shift(user_id, full_name, photo_file_id, shift_date, start_time_str, end_time_str, zone, witag)
        logging.info(f"–°–º–µ–Ω–∞ –¥–ª—è {full_name} –Ω–∞ {shift_date} ({start_time_str}-{end_time_str}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        await message.reply(
            f"‚úÖ **{full_name}** –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Å–º–µ–Ω—É.\n"
            f"–î–∞—Ç–∞: `{shift_date}`\n"
            f"–í—Ä–µ–º—è: `{start_time_str}-{end_time_str}`\n"
            f"–ó–æ–Ω–∞: `{zone}`\n"
            f"Witag: `{witag}`",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã –¥–ª—è {full_name}: {e}", exc_info=True)
        await message.reply("‚ùóÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message_handler(commands=['report'])
async def get_report(message: types.Message):
    """–û—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–∞–º –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É."""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        logging.warning(f"ID {user_id} –ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /report.")
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤.")
        return

    logging.info(f"ID {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—á–µ—Ç.")

    today_date_str = datetime.now(GROUP_TIMEZONE).strftime('%d.%m.%y')
    shifts = get_shifts_for_date(today_date_str)

    if not shifts:
        await message.reply(f"üìÑ –ù–∞ **{today_date_str}** —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode=ParseMode.MARKDOWN)
        return

    morning_shift_employees = []
    evening_shift_employees = []
    full_day_shift_employees = []

    for name, start, end, zone, witag in shifts:
        shift_info = f"  - `{name}` ({zone}, Witag: {witag})"
        if start == "07:00" and end == "15:00":
            morning_shift_employees.append(shift_info)
        elif start == "15:00" and end == "23:00":
            evening_shift_employees.append(shift_info)
        elif start == "07:00" and end == "23:00":
            full_day_shift_employees.append(shift_info)

    total_employees = len(morning_shift_employees) + \
                      len(evening_shift_employees) + \
                      len(full_day_shift_employees)

    report_text = [f"**üìä –û—Ç—á–µ—Ç –Ω–∞ {today_date_str}**\n"]
    
    report_text.append(f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π: {total_employees}**\n")

    if morning_shift_employees:
        report_text.append(f"**‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ (07:00 - 15:00): {len(morning_shift_employees)} —á–µ–ª.**")
        report_text.extend(sorted(morning_shift_employees))
    else:
        report_text.append("**‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ (07:00 - 15:00): 0 —á–µ–ª.**\n  - *–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤*")
    
    report_text.append("\n")
    
    if evening_shift_employees:
        report_text.append(f"**üåô –í–µ—á–µ—Ä–Ω—è—è —Å–º–µ–Ω–∞ (15:00 - 23:00): {len(evening_shift_employees)} —á–µ–ª.**")
        report_text.extend(sorted(evening_shift_employees))
    else:
        report_text.append("**üåô –í–µ—á–µ—Ä–Ω—è—è —Å–º–µ–Ω–∞ (15:00 - 23:00): 0 —á–µ–ª.**\n  - *–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤*")

    report_text.append("\n")

    if full_day_shift_employees:
        report_text.append(f"**üóìÔ∏è –¶–µ–ª—ã–π –¥–µ–Ω—å (07:00 - 23:00): {len(full_day_shift_employees)} —á–µ–ª.**")
        report_text.extend(sorted(full_day_shift_employees))
    else:
        report_text.append("**üóìÔ∏è –¶–µ–ª—ã–π –¥–µ–Ω—å (07:00 - 23:00): 0 —á–µ–ª.**\n  - *–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤*")


    await message.reply("\n".join(report_text), parse_mode=ParseMode.MARKDOWN)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    init_db()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)